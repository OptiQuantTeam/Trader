name: AWS Lambda Build

on:
  push:
    branches:
      - master
      - develop

jobs:
  init-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      env_type: ${{ steps.set-env.outputs.env_type }}
    steps:
      - name: Set version
        id: set-version
        run: |
          version=$(TZ='Asia/Seoul' date +'%Y%m%d')
          echo "version=${version}" >> $GITHUB_OUTPUT
      
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "env_type=prod" >> $GITHUB_OUTPUT
          else
            echo "env_type=dev" >> $GITHUB_OUTPUT
          fi

  build:
    needs: init-version
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-var.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set Environment Variables
        id: set-var
        run: |
          echo "ECR_URI=${{ secrets.AWS_ECR_TRADER_URI }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ secrets.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.init-version.outputs.version }}" >> $GITHUB_ENV
          echo "ENV_TYPE=${{ needs.init-version.outputs.env_type }}" >> $GITHUB_ENV
          if [[ "${{ needs.init-version.outputs.env_type }}" == "prod" ]]; then
            echo "tag=${{ needs.init-version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "tag=${{ needs.init-version.outputs.env_type }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Delete ECR images
        run: |
          REPO_NAME=$(echo $ECR_URI | cut -d'/' -f2-)
          echo "리포지토리: $REPO_NAME"
          
          if [[ "$ENV_TYPE" == "prod" ]]; then
            IMAGES=$(aws ecr describe-images --repository-name $REPO_NAME --output json)
            IMAGE_DIGESTS=$(echo $IMAGES | jq -r '.imageDetails[] | 
              select(.imageTags != null and (.imageTags[] | test("^[0-9]{8}$"))) | 
              .imageDigest')
          else
            IMAGE_DIGESTS=$(aws ecr describe-images \
              --repository-name $REPO_NAME \
              --query 'imageDetails[?imageTags[0]==`dev`].[imageDigest]' \
              --output text)
          fi
          
          if [ ! -z "$IMAGE_DIGESTS" ]; then
            echo "이미지 삭제 중..."
            for digest in $IMAGE_DIGESTS; do
              aws ecr batch-delete-image \
                --repository-name $REPO_NAME \
                --image-ids imageDigest=$digest
              echo "이미지 삭제 완료: $digest"
            done
            echo "선택된 이미지 삭제가 완료되었습니다."
          else
            echo "삭제할 이미지가 없습니다."
          fi

      - name: Build and Push Image
        run: |
          DOCKERFILE=$([[ "$ENV_TYPE" == "prod" ]] && echo "Dockerfile" || echo "Dockerfile.dev")
          docker build -t ${IMAGE_NAME}:${tag} -f ${DOCKERFILE} --no-cache .
          docker tag ${IMAGE_NAME}:${tag} ${ECR_URI}:${tag}
          docker push ${ECR_URI}:${tag}


  deploy:
    needs: [init-version, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: ${{ github.ref == 'refs/heads/master' && fromJSON(vars.PROD_LAMBDA_NAMES) || fromJSON(vars.DEV_LAMBDA_NAME) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Environment Variables
        id: set-var
        run: |
          echo "ECR_URI=${{ secrets.AWS_ECR_TRADER_URI }}" >> $GITHUB_ENV

      - name: Update Lambda
        run: |
          LAMBDA_NAME="trader-lambda-${{ matrix.lambda }}"
          TAG="${{ needs.build.outputs.tag }}"
          
          echo "Updating Lambda function: $LAMBDA_NAME"
          echo "Using image: $ECR_URI:$TAG"
          
          aws lambda update-function-code \
            --function-name "$LAMBDA_NAME" \
            --image-uri "$ECR_URI:$TAG"

      - name: Wait for Lambda Update
        run: |
          echo "Lambda 업데이트 후 30초 대기..."
          sleep 30

      - name: Test Lambda
        run: |
          LAMBDA_NAME="trader-lambda-${{ matrix.lambda }}"
          RESPONSE=$(aws lambda invoke \
            --function-name $LAMBDA_NAME \
            --payload '{"mode": "test","statusCode":200,"info":{"symbol": "BTCUSDT","side": "BUY","positionSide": "LONG","trade": "futures"}}' \
            --cli-binary-format raw-in-base64-out \
            output.json)
          
          STATUS_CODE=$(echo $RESPONSE | jq -r '.StatusCode')
          FUNCTION_ERROR=$(echo $RESPONSE | jq -r '.FunctionError // empty')
          
          if [ "$STATUS_CODE" != "200" ] || [ ! -z "$FUNCTION_ERROR" ]; then
            echo "::error::Lambda 테스트 실패"
            echo $RESPONSE
            exit 1
          fi

  notify:
    needs: [init-version, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack 알림 전송
        env:
          VERSION: ${{ needs.init-version.outputs.version }}
          ENV_TYPE: ${{ needs.init-version.outputs.env_type }}
        run: |
          ENV_TEXT=$([[ "$ENV_TYPE" == "prod" ]] && echo "프로덕션" || echo "개발")
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            COLOR="good"
            STATUS="성공"
          else
            COLOR="danger"
            STATUS="실패"
          fi

          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [
              {
                \"color\": \"$COLOR\",
                \"title\": \"Trader LAMBDA $ENV_TEXT 환경 배포 $STATUS\",
                \"fields\": [
                  {
                    \"title\": \"브랜치\",
                    \"value\": \"$(echo ${{ github.ref }} | cut -d'/' -f3)\",
                    \"short\": true
                  },
                  {
                    \"title\": \"버전\",
                    \"value\": \"$VERSION\",
                    \"short\": true
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}