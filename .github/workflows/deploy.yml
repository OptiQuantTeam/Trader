name: AWS Lambda Build

on:
  push:
    branches:
      - master
      - develop


jobs:
  # 프로덕션(master) 배포 작업
  init-version:
    runs-on: ubuntu-latest
    steps:
      - name: Set version
        id: set-version
        run: |
          version=$(TZ='Asia/Seoul' date +'%Y%m%d')
          echo "version=${version}" >> $GITHUB_OUTPUT

  prod-deploy:
    needs: init-version
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Production Image
        run: |
          docker build -t trader-lambda:${version:-latest} --no-cache .
          docker tag trader-lambda:${version:-latest} ${{ secrets.AWS_ECR_TRADER_URI }}:${{ needs.init-version.outputs.version }}
          docker push ${{ secrets.AWS_ECR_TRADER_URI }}:${{ needs.init-version.outputs.version }}

      - name: Update Production Lambda
        run: |
          aws lambda update-function-code \
            --function-name trader-lambda \
            --image-uri ${{ secrets.AWS_ECR_TRADER_URI }}:${{ needs.init-version.outputs.version }}

      - name: Test Production Lambda
        run: |
          RESPONSE=$(aws lambda invoke \
            --function-name trader-lambda \
            --payload '{"mode": "test","symbol": "BTCUSDT","side": "BUY","positionSide": "LONG","trade": "futures"}' \
            --cli-binary-format raw-in-base64-out \
            output.json)
          
          STATUS_CODE=$(echo $RESPONSE | jq -r '.StatusCode')
          FUNCTION_ERROR=$(echo $RESPONSE | jq -r '.FunctionError // empty')
          
          if [ "$STATUS_CODE" != "200" ] || [ ! -z "$FUNCTION_ERROR" ]; then
            echo "::error::프로덕션 Lambda 테스트 실패"
            exit 1
          fi

  # 개발(develop) 배포 작업
  dev-deploy:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Development Image
        run: |
          docker build -t trader-lambda-dev:${version:-latest} -f Dockerfile.dev --no-cache .
          docker tag trader-lambda-dev:${version:-latest} ${{ secrets.AWS_ECR_TRADER_DEV_URI }}:${{ needs.init-version.outputs.version }}
          docker push ${{ secrets.AWS_ECR_TRADER_DEV_URI }}:${{ needs.init-version.outputs.version }}

      - name: Update Development Lambda
        run: |
          aws lambda update-function-code \
            --function-name trader-lambda-dev \
            --image-uri ${{ secrets.AWS_ECR_TRADER_DEV_URI }}:${{ needs.init-version.outputs.version }}
      
      - name: Wait for 30 seconds
        run: sleep 30

      - name: Test Development Lambda
        run: |
          RESPONSE=$(aws lambda invoke \
            --function-name trader-lambda-dev \
            --payload '{"mode": "test","symbol": "BTCUSDT","side": "BUY","positionSide": "LONG","trade": "futures"}' \
            --cli-binary-format raw-in-base64-out \
            output.json)
          
          STATUS_CODE=$(echo $RESPONSE | jq -r '.StatusCode')
          FUNCTION_ERROR=$(echo $RESPONSE | jq -r '.FunctionError // empty')
          
          if [ "$STATUS_CODE" != "200" ] || [ ! -z "$FUNCTION_ERROR" ]; then
            echo "::error::개발 Lambda 테스트 실패"
            echo $RESPONSE
            exit 1
          fi

  # 공통 알림 작업
  notify:
    needs: [prod-deploy, dev-deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack 알림 전송
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            ENV="프로덕션"
            RESULT="${{ needs.prod-deploy.result }}"
          else
            ENV="개발"
            RESULT="${{ needs.dev-deploy.result }}"
          fi

          if [ "$RESULT" = "success" ]; then
            COLOR="good"
            STATUS="성공"
          else
            COLOR="danger"
            STATUS="실패"
          fi

          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [
              {
                \"color\": \"$COLOR\",
                \"title\": \"$ENV 환경 배포 $STATUS\",
                \"fields\": [
                  {
                    \"title\": \"브랜치\",
                    \"value\": \"${{ github.ref }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"버전\",
                    \"value\": \"${{ needs.init-version.outputs.version }}\",
                    \"short\": true
                  }
                ]
              }
            ]
          }" ${{ secrets.SLACK_WEBHOOK_URL }}